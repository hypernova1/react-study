{"ast":null,"code":"var _jsxFileName = \"/Users/melchor/dev/Git/react-study/movie-app-2019-2/src/App.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //state는 직접 변경하면 안 됨\n      isLoading: true,\n      movies: [],\n      count: 0\n    };\n\n    this.add = () => {\n      this.setState(current => ({\n        count: current.count + 1\n      }));\n    };\n\n    this.minus = () => {\n      this.setState(current => ({\n        count: current.count - 1\n      }));\n    };\n\n    this.getMovies = async () => {\n      const _ref = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating'),\n            movies = _ref.data.data.movies;\n\n      this.setState({\n        movies,\n        isLoading: false\n      });\n    };\n\n    console.log(\"constructor\");\n  }\n\n  componentDidMount() {\n    //렌더링이 완료되고 호출\n    console.log(\"component rendered\");\n    this.getMovies();\n  }\n\n  componentDidUpdate() {\n    console.log(\"component updated\");\n  }\n\n  componentWillUnmount() {\n    console.log(\"component will unmounted\");\n  }\n\n  render() {\n    //리액트는 자동으로 클래스 컴포넌트의 render 함수를 실행한다.\n    console.log(\"render\");\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          movies = _this$state.movies;\n    console.log(movies);\n    return React.createElement(\"section\", {\n      class: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, isLoading ? React.createElement(\"div\", {\n      class: \"loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"loader_text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Loading...\")) : React.createElement(\"div\", {\n      class: \"movies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, movies.map(movie => React.createElement(Movie, {\n      id: movie.id,\n      year: movie.year,\n      title: movie.title,\n      summary: movie.summary,\n      poster: movie.medium_cover_image,\n      key: movie.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/melchor/dev/Git/react-study/movie-app-2019-2/src/App.js"],"names":["React","PropTypes","axios","Movie","App","Component","constructor","props","state","isLoading","movies","count","add","setState","current","minus","getMovies","get","data","console","log","componentDidMount","componentDidUpdate","componentWillUnmount","render","map","movie","id","year","title","summary","medium_cover_image"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAKnBC,KALmB,GAKX;AAAE;AACRC,MAAAA,SAAS,EAAE,IADL;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,KAAK,EAAE;AAHD,KALW;;AAAA,SAWnBC,GAXmB,GAWb,MAAM;AACV,WAAKC,QAAL,CAAcC,OAAO,KAAK;AAAEH,QAAAA,KAAK,EAAEG,OAAO,CAACH,KAAR,GAAgB;AAAzB,OAAL,CAArB;AACD,KAbkB;;AAAA,SAenBI,KAfmB,GAeX,MAAM;AACZ,WAAKF,QAAL,CAAcC,OAAO,KAAK;AAAEH,QAAAA,KAAK,EAAEG,OAAO,CAACH,KAAR,GAAgB;AAAzB,OAAL,CAArB;AACD,KAjBkB;;AAAA,SAmBnBK,SAnBmB,GAmBP,YAAW;AAAA,mBAKhB,MAAMd,KAAK,CAACe,GAAN,CAAU,0DAAV,CALU;AAAA,YAGTP,MAHS,QAEnBQ,IAFmB,CAGjBA,IAHiB,CAGTR,MAHS;;AAOpB,WAAKG,QAAL,CAAc;AAAEH,QAAAA,MAAF;AAAUD,QAAAA,SAAS,EAAE;AAArB,OAAd;AACF,KA3BkB;;AAEjBU,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD;;AA0BDC,EAAAA,iBAAiB,GAAG;AAAE;AACpBF,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,SAAKJ,SAAL;AAED;;AAEDM,EAAAA,kBAAkB,GAAG;AACnBH,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;;AAEDG,EAAAA,oBAAoB,GAAG;AACrBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;;AAEDI,EAAAA,MAAM,GAAG;AAAE;AACTL,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AADO,wBAEuB,KAAKZ,KAF5B;AAAA,UAECC,SAFD,eAECA,SAFD;AAAA,UAEYC,MAFZ,eAEYA,MAFZ;AAGPS,IAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACA,WACE;AAAS,MAAA,KAAK,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,SAAS,GACN;AAAK,MAAA,KAAK,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAC,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADM,GAIN;AAAK,MAAA,KAAK,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,MAAM,CAACe,GAAP,CAAWC,KAAK,IACP,oBAAC,KAAD;AACE,MAAA,EAAE,EAAEA,KAAK,CAACC,EADZ;AAEE,MAAA,IAAI,EAAED,KAAK,CAACE,IAFd;AAGE,MAAA,KAAK,EAAEF,KAAK,CAACG,KAHf;AAIE,MAAA,OAAO,EAAEH,KAAK,CAACI,OAJjB;AAKE,MAAA,MAAM,EAAEJ,KAAK,CAACK,kBALhB;AAME,MAAA,GAAG,EAAEL,KAAK,CAACC,EANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADT,CADH,CALN,CADF;AAqBD;;AAtE+B;;AAyElC,eAAevB,GAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    console.log(\"constructor\");\n  }\n\n  state = { //state는 직접 변경하면 안 됨\n    isLoading: true,\n    movies: [],\n    count: 0\n  };\n\n  add = () => {\n    this.setState(current => ({ count: current.count + 1 }));\n  }\n\n  minus = () => {\n    this.setState(current => ({ count: current.count - 1 }));\n  }\n\n  getMovies = async() => {\n    const {\n      data : {\n        data: { movies }\n      }\n     } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n\n     this.setState({ movies, isLoading: false });\n  }\n\n  componentDidMount() { //렌더링이 완료되고 호출\n    console.log(\"component rendered\");\n    this.getMovies();\n\n  }\n\n  componentDidUpdate() {\n    console.log(\"component updated\");\n  }\n\n  componentWillUnmount() {\n    console.log(\"component will unmounted\");\n  }\n\n  render() { //리액트는 자동으로 클래스 컴포넌트의 render 함수를 실행한다.\n    console.log(\"render\");\n    const { isLoading, movies } = this.state;\n    console.log(movies);\n    return (\n      <section class=\"container\">\n        {isLoading ? (\n            <div class=\"loader\">\n              <span class=\"loader_text\">Loading...</span>\n            </div> ) : ( \n            <div class=\"movies\">\n              {movies.map(movie => (\n                        <Movie \n                          id={movie.id}\n                          year={movie.year}\n                          title={movie.title}\n                          summary={movie.summary}\n                          poster={movie.medium_cover_image}\n                          key={movie.id} />\n              ))}\n              </div>\n                )}\n      </section>\n    \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}