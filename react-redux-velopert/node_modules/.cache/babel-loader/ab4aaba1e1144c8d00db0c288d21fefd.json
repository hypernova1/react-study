{"ast":null,"code":"var _jsxFileName = \"/Users/melchor/dev/Git/react-router-test/src/components/App/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Nav from '../Nav/Navigation';\nimport Cart from '../Cart/Cart';\nimport Main from '../Main/Main';\nimport Item from '../Item/Item';\nimport data from 'MOCK_DATA.json';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleAddToCart = selectedProduct => {\n      let cartItem = this.state.cart;\n      let productID = selectedProduct.id;\n\n      if (this.checkProduct(productID)) {\n        let index = cartItem.findIndex(item => item.id === productID);\n        cartItem[index].quantity += 1;\n        this.setState({\n          cart: cartItem\n        });\n      } else {\n        cartItem.push(selectedProduct);\n        this.setState({\n          cart: cartItem,\n          quantity: 1\n        });\n      }\n    };\n\n    this.renderFoodDetail = () => this.state.products.map(product => React.createElement(Route, {\n      exact: true,\n      path: \"item/\".concat(product.id),\n      render: props => React.createElement(Item, {\n        addToCart: this.handleAddToCart,\n        produtQuantity: this.state.quantity,\n        image: product.image,\n        name: product.name,\n        price: product.price,\n        id: product.id,\n        key: product.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n\n    this.checkProduct = id => {\n      let cart = this.state.cart;\n      return cart.some(item => item.id === id);\n    };\n\n    this.sumTotalAmount = () => {\n      let cart = this.state.cart;\n      let total = 0;\n      cart.forEach(item => {\n        total += item.price * Number(cart.quantity);\n      });\n      this.setState({\n        totalAmount: total\n      });\n    };\n\n    this.componentDidMount = () => {\n      let cart = localStorage.cart;\n\n      if (cart) {\n        this.setState(current => ({\n          cart: JSON.parse(cart)\n        }), () => {\n          this.sumTotalAmount();\n        });\n      }\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevState.cart !== this.state.cart) {\n        localStorage.cart = JSON.stringify(this.state.cart);\n      }\n    };\n\n    this.state = {\n      products: data,\n      cart: [],\n      quantity: 1,\n      totalAmount: 0\n    }; // this.renderFoodDetail = this.renderFoodDetail.bind(this);\n    // this.handleAddTocart = this.handleAddTocart.bind(this);\n    // this.checkProduct = this.checkProduct.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: props => {\n        return React.createElement(Main, {\n          products: this.state.products,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/cart\",\n      render: props => React.createElement(Cart, {\n        cart: this.state.cart,\n        totalAmount: this.state.totalAmount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), this.renderFoodDetail()));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/melchor/dev/Git/react-router-test/src/components/App/App.js"],"names":["React","Component","Route","Switch","Nav","Cart","Main","Item","data","App","constructor","handleAddToCart","selectedProduct","cartItem","state","cart","productID","id","checkProduct","index","findIndex","item","quantity","setState","push","renderFoodDetail","products","map","product","props","image","name","price","some","sumTotalAmount","total","forEach","Number","totalAmount","componentDidMount","localStorage","current","JSON","parse","componentDidUpdate","prevProps","prevState","stringify","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Nav from '../Nav/Navigation';\nimport Cart from '../Cart/Cart';\nimport Main from '../Main/Main';\nimport Item from '../Item/Item';\nimport data from 'MOCK_DATA.json';\nimport './App.css';\n\nclass App extends Component  {\n  constructor() {\n    super();\n    this.state = {\n      products: data,\n      cart: [],\n      quantity: 1,\n      totalAmount: 0\n    };\n    // this.renderFoodDetail = this.renderFoodDetail.bind(this);\n    // this.handleAddTocart = this.handleAddTocart.bind(this);\n    // this.checkProduct = this.checkProduct.bind(this);\n  };\n\n  handleAddToCart = (selectedProduct) => {\n    let cartItem = this.state.cart;\n    let productID = selectedProduct.id;\n    if(this.checkProduct(productID)) {\n      let index = cartItem.findIndex(item => (\n        item.id === productID\n      ));\n\n      cartItem[index].quantity += 1;\n      this.setState({\n        cart: cartItem\n      })\n    } else {\n      cartItem.push(selectedProduct);\n      this.setState({\n        cart: cartItem,\n        quantity: 1\n      })\n    }\n  };\n\n  renderFoodDetail = () => (\n    this.state.products.map(product => (\n      <Route\n        exact\n        path={`item/${product.id}`}\n        render={props => (\n          <Item\n            addToCart={this.handleAddToCart}\n            produtQuantity={this.state.quantity}\n            image={product.image}\n            name={product.name}\n            price={product.price}\n            id={product.id}\n            key={product.id}\n          />\n        )}\n        />\n    ))\n  );\n  \n  checkProduct = id => {\n    let cart = this.state.cart;\n    return cart.some(item => (\n      item.id === id\n    ));\n  };\n\n  sumTotalAmount = () => {\n    let cart = this.state.cart;\n    let total = 0;\n    cart.forEach(item => {\n      total += item.price * Number(cart.quantity);\n    })\n    this.setState({\n      totalAmount: total\n    })\n  }\n\n  componentDidMount = () => {\n    let cart = localStorage.cart;\n    if(cart) {\n      this.setState(current => ({\n        cart: JSON.parse(cart)\n      }), () => {\n        this.sumTotalAmount();\n      });\n    }\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if(prevState.cart !== this.state.cart) {\n      localStorage.cart = JSON.stringify(this.state.cart);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav />\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={props => {\n              return (\n                <Main\n                  products={this.state.products}\n                />\n                  );\n              }}\n            />\n            <Route\n              exact\n              path=\"/cart\"\n              render={props => (\n                <Cart\n                  cart={this.state.cart}\n                  totalAmount={this.state.totalAmount}\n                />\n              )}\n              />\n            {this.renderFoodDetail()}\n        </Switch>\n      </div>\n    );\n  };\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}